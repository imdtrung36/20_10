import { useState, useRef, useState as ReactUseState } from "react";
import axios from "axios";
import { API_ENDPOINTS, API_BASE_URL } from "./config/api";
import MessageForm from "./pages/MessageForm";
import MessagesList from "./components/MessagesList";
import "./styles/index.css";

function App() {
  const [page, setPage] = useState("form");
  const [isPlaying, setIsPlaying] = useState(false);
  const audioRef = useRef(null);
  const [toast, setToast] = useState(null);

  const toggleMusic = () => {
    const audio = audioRef.current;
    if (!audio) return;
    if (isPlaying) {
      audio.pause();
    } else {
      audio.play().catch(err => console.warn("Kh√¥ng th·ªÉ ph√°t:", err));
    }
    setIsPlaying(!isPlaying);
  };

  return (
    <div className="app">
      {/* üéµ Ch·ªâ ph√°t khi b·∫•m n√∫t */}
      <audio
        ref={audioRef}
        id="bg-music"
        src={import.meta.env.BASE_URL + "music.mp3"}
      />

      <header className="header">
        <h1 className="title">üíê Ng√†y Ph·ª• n·ªØ Vi·ªát Nam</h1>
        <div className="menu">
          <button onClick={() => setPage("form")}>G·ª≠i l·ªùi ch√∫c</button>
          <button onClick={() => setPage("messages")}>Xem l·ªùi ch√∫c</button>
        </div>
      </header>

      <main className="content">
        {page === "form" && (
          <MessageForm onSubmitted={() => setPage("messages")} />
        )}
        {page === "messages" && <MessagesList />}
      </main>

      {/* üîó Share n·ªïi: l·∫•y link m·ªõi nh·∫•t n·∫øu c√≥ */}
      <ShareButton notify={(msg, type = 'success') => {
        setToast({ msg, type });
        setTimeout(() => setToast(null), 2500);
      }} />

      <button className="music-btn" onClick={toggleMusic}>
        {isPlaying ? "üîä T·∫Øt nh·∫°c" : "üéµ B·∫≠t nh·∫°c"}
      </button>

      {toast && (
        <div className={`toast toast-${toast.type}`}>
          <span>{toast.msg}</span>
        </div>
      )}
    </div>
  );
}

export default App;

// üîó N√∫t share d√πng localStorage ƒë·ªÉ l·∫•y link g·∫ßn nh·∫•t
function ShareButton({ notify }) {
  const handleClick = async () => {
    let link = null;
    try { link = localStorage.getItem('lastShareLink'); } catch {}
    if (!link) {
      // N·∫øu ch∆∞a c√≥ link share c·ª• th·ªÉ, fallback sang link "c√¢y" theo visitorToken (n·∫øu server tr·∫£ v·ªÅ)
      let vt = null;
      try { vt = localStorage.getItem('visitorToken'); } catch {}
      if (vt) {
        try {
          const res = await axios.get(`${API_ENDPOINTS.MESSAGES}/share-tree/${vt}`);
          const list = (res.data && (res.data.data || res.data)) || [];
          const last = Array.isArray(list) && list.length ? list[list.length - 1] : null;
          if (last) {
            // ƒê·∫£m b·∫£o c√≥ shareToken cho b·∫£n ghi m·ªõi nh·∫•t
            if (!last.shareToken) {
              const create = await axios.post(`${API_ENDPOINTS.MESSAGES}/${last.id}/share`);
              link = create.data?.data?.shareLink || null;
            }
            if (!link && last.shareToken) {
              link = `${API_BASE_URL}/share/${last.shareToken}`;
            }
          }
          // N·∫øu v·∫´n ch∆∞a c√≥, fallback c√¢y theo visitorToken
          if (!link) link = `${window.location.origin}/20_10/view.html?visitorToken=${vt}`;
        } catch {
          link = `${window.location.origin}/20_10/view.html?visitorToken=${vt}`;
        }
      }
    }
    if (!link) {
      notify && notify('Ch∆∞a c√≥ link chia s·∫ª. H√£y g·ª≠i m·ªôt l·ªùi ch√∫c tr∆∞·ªõc nh√©!', 'warning');
      return;
    }
    try {
      await navigator.clipboard.writeText(link);
      notify && notify('ƒê√£ copy link chia s·∫ª!', 'success');
    } catch {
      notify && notify('Kh√¥ng th·ªÉ copy t·ª± ƒë·ªông. Link ƒë√£ s·∫µn s√†ng ƒë·ªÉ b·∫°n copy th·ªß c√¥ng.', 'info');
    }
  };
  return (
    <button className="share-floating-btn" onClick={handleClick}>üîó Share</button>
  );
}
